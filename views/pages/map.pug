extends layout.pug

block head
            title @Dataiku tweets Map

block content
    #map
    
    script(src='https://unpkg.com/leaflet@1.3.1/dist/leaflet.js')
    script(src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.3.6/chroma.min.js")
    script(src="https://cdn.jsdelivr.net/gh/dwilhelm89/LeafletSlider/dist/leaflet.SliderControl.min.js")
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js')
    script(src="https://code.jquery.com/ui/1.12.1/jquery-ui.js")
    script(src="https://cdn.jsdelivr.net/gh/tomcat4x/leaflet-groupedlayercontrol@feb7bba8a71ea412e0662fa020c9ab7979cf2233/src/leaflet.groupedlayercontrol.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui-touch-punch/0.2.3/jquery.ui.touch-punch.min.js")
    //script(src="https://unpkg.com/leaflet-responsive-popup@0.2.0/leaflet.responsive.popup.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/leaflet-providers/1.1.17/leaflet-providers.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.EasyButton/2.2.3/easy-button.min.js")
    script(src="https://cdn.jsdelivr.net/gh/consbio/Leaflet.Basemaps/L.Control.Basemaps-min.js")
    script(type='text/javascript').
        var map = L.map('map').setView([#{lat},#{lng}], 3);
        var openstreetBlackAndWhite = L.tileLayer.provider('CartoDB.Positron', {'minZoom': 2, 'maxZoom':20, 'label':'CartoDB Positron'});
        var cartodbDarkMatter = L.tileLayer.provider('CartoDB.DarkMatter', {'minZoom': 2, 'maxZoom':20, 'label':'CartoDB DarkMatter'}).addTo(map);
        
        var countPoints = 0;
        var customOptions = {
            'className' : 'custom',
        };
        var citweetsPos = L.layerGroup();
        var citweetsNeg = L.layerGroup();
        var citweetsNeu = L.layerGroup();
        var allOverlays = L.layerGroup();
        var sliderControl = undefined;
        $.getJSON('/maplayers',function(result){
            $.each(result, function(i, record){
                // Replace by your own column names here
                //console.log(record)
                var epoch = record["timestamp_parsed"];
                var lat = parseFloat(record["_lat"]);
                var lon = parseFloat(record["_lon"]);
                var name = record["user"];
                var tweet = record["text"];
                var senti =  record["sentiment"];
                var size = parseInt(record["likes"]);
                var sentiVal = senti == "positive" ? 1: senti=="negative" ? 2 : 3;
                // Radius of the marker is in meters
                var rad = Math.log(size+2) *  5;
                var scolor = chroma.scale(['ForestGreen','FireBrick','RoyalBlue']).domain([1,3]);
                //debugger
                if (!isNaN(lat) && !isNaN(lon)){
                    countPoints +=1;
                    //console.log(lat,lon)
                    var customPopup = "<p>User: <strong>" + name + "</strong></br>"+
                                 "Tweet: <strong>" + tweet + "</strong></br>"+
                                 "PubDate: <strong>" + epoch + "</strong></br>"+
                                 "Likes: <strong>" + size + "</strong></br>"+
                                 "Sentiment: <strong>" + senti + "</strong></p>";

                    //var popup = L.responsivePopup().setContent(customPopup);
                    var color = scolor(sentiVal).hex();
                    var marker = new L.circleMarker([lat, lon],{
                        radius: rad,
                        color: color,
                        fillColor: color,
                        fillOpacity: 0.1,
                        time: epoch
                    })
                    .bindPopup(customPopup, customOptions);
                    allOverlays.addLayer(marker);
                    senti=="positive" ? citweetsPos.addLayer(marker) : senti=="negative" ? citweetsNeg.addLayer(marker) : citweetsNeu.addLayer(marker) ;
                }
            });

            //Base maps layers            
            var basemaps = [cartodbDarkMatter, openstreetBlackAndWhite]
            //var clonAllOverlays = cloneLayer(allOverlays);
            // Overlay layers are grouped
            var groupedOverlays = {
                "Tweets by Sentiment": {
                "Pos. Tweets": citweetsPos,
                "Neg. Tweets": citweetsNeg,
                "Neu. Tweets": citweetsNeu,
                }
            };
            
            // Use the custom grouped layer control, not "L.control.layers"
            
            var layerControl = L.control.basemaps({
                basemaps: basemaps,
                tileX: 0,  // tile X coordinate
                tileY: 0,  // tile Y coordinate
                tileZ: 1   // tile zoom level
            });
            map.addControl(layerControl);

            var activeOverlays = [];
            map.on("overlayadd", function(eo) {
                //debugger
                //console.log("added overlay: " + eo.name);
            });
            
            map.on("overlayremove", function(eo){
                //console.log("removed overlay: " + eo.name);
            });
            
            var toggle = L.easyButton({
                id: 'animated-marker-toggle',
                type: 'animate',
                states: [{
                stateName: 'add-timeline',
                icon: 'fa-sliders',
                title: 'Add a timeline slider of all markers',
                onClick: function(control) {
                    toggle2.disable();
                    toggle3.disable();
                    toggle4.disable();
                    if (map.hasLayer(citweetsPos)){
                        map.removeLayer(citweetsPos);
                    }
                    if (map.hasLayer(citweetsNeg)){
                        map.removeLayer(citweetsNeg);
                    }
                    if (map.hasLayer(citweetsNeu)){
                        map.removeLayer(citweetsNeu);
                        control.state('add-neutral');
                    }
                    sliderControl = L.control.sliderControl({position: "topright", layer: allOverlays, showAllOnStart: false});
                    map.addControl(sliderControl);
                    sliderControl.startSlider();
                    control.state('remove-timeline');
                    toggle2.state('add-positive');
                    toggle3.state('add-negative');
                    toggle4.state('add-neutral');
                }
                }, {
                    icon: 'fa-undo',
                    stateName: 'remove-timeline',
                    onClick: function(control) {
                        toggle2.enable();
                        toggle3.enable();
                        toggle4.enable();
                        sliderControl.removeFrom(map);
                        control.state('add-timeline');

                    },
                title: 'remove timeline slider and markers'
                }]
            });

            var toggle2 = L.easyButton({
                id: 'animated-marker-toggle2',
                type: 'animate',
                states: [{
                stateName: 'add-positive',
                icon: 'fa-check-circle',
                title: 'Add Positive markers',
                onClick: function(control) {
                    map.addLayer(citweetsPos);
                    control.state('remove-positive');
                }
                }, {
                    icon: 'fa-undo',
                    stateName: 'remove-positive',
                    onClick: function(control) {
                        map.removeLayer(citweetsPos);
                        control.state('add-positive');
                    },
                title: 'remove positive markers'
                }]
            });

            var toggle3 = L.easyButton({
                id: 'animated-marker-toggle3',
                type: 'animate',
                states: [{
                stateName: 'add-negative',
                icon: 'fa-times-circle',
                title: 'Add Negative markers',
                onClick: function(control) {
                    map.addLayer(citweetsNeg);
                    control.state('remove-negative');
                }
                }, {
                    icon: 'fa-undo',
                    stateName: 'remove-negative',
                    onClick: function(control) {
                        map.removeLayer(citweetsNeg);
                        control.state('add-negative');
                    },
                title: 'remove negative markers'
                }]
            });
            var toggle4 = L.easyButton({
                id: 'animated-marker-toggle4',
                type: 'animate',
                states: [{
                stateName: 'add-neutral',
                icon: 'fa-minus-circle',
                title: 'Add Neutral markers',
                onClick: function(control) {
                    map.addLayer(citweetsNeu);
                    control.state('remove-neutral');
                }
                }, {
                    icon: 'fa-undo',
                    stateName: 'remove-neutral',
                    onClick: function(control) {
                        map.removeLayer(citweetsNeu);
                        control.state('add-neutral');
                    },
                title: 'remove neutral markers'
                }]
            });

            var sentiBar = L.easyBar([toggle, toggle2, toggle3, toggle4,]);

            sentiBar.addTo(map);

            //citweetsPos.eachLayer(function (marker) {
            //    allOverlays.addLayer(marker);
            //});
            //citweetsNeg.eachLayer(function (marker) {
            //    allOverlays.addLayer(marker);
            //});
            //citweetsNeu.eachLayer(function (marker) {
            //    allOverlays.addLayer(marker);
            //});
            //var callOverlays = $.extend(true, {}, allOverlays);
            //var sliderControl = undefined;
            //$(".leaflet-control-layers-group-selector").change(function() {
                //debugger
            //    if(this.checked){
                    //map.removeLayer(citweetsPos);
                    //map.removeLayer(citweetsNeg);
                    //map.removeLayer(citweetsNeu);
                    //alert("El checkbox con valor " + $(this).val() + " está seleccionado");
            //        sliderControl = L.control.sliderControl({position: "topright", layer: allOverlays, showAllOnStart: false});
            //        map.addControl(sliderControl);
            //        sliderControl.startSlider();
                    
            //    }
            //    else if (!this.checked){
            //        sliderControl.removeFrom(map);
            //    }
            //});
           //debugger
        });
